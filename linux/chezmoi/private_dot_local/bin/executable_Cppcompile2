#!/bin/bash

function colorecho() {
    color_code=$1
    shift
    echo -e "\033[${color_code}m$@\033[0m"
}

function grayecho() {
    colorecho 30 "$@"
}
function redecho() {
    colorecho 31 "$@"
}
function greenecho() {
    colorecho 32 "$@"
}
function yellowecho() {
    colorecho 33 "$@"
}
function blueecho() {
    colorecho 34 "$@"
}
function purpleecho() {
    colorecho 35 "$@"
}

function precompile() {
    parameters="$@"
    precompile=1
    # we will precompile stdc++.h and extc++.h to speed up compilation
    # we will hash the flags to determine if we need to recompile them
    # we cache these precompiled headers in .local/include/c++-hash
    # with the help of -I flag we can include them in our code

    stdc=$(ls /usr/include/c++/*/*/bits/stdc++.h | sort -r | head -n 1)
    if [ -z "$stdc" ]; then
        redecho "stdc++.h not found"
        precompile=0
    fi

    extc=$(ls /usr/include/c++/*/*/bits/extc++.h | sort -r | head -n 1)
    if [ -z "$extc" ]; then
        redecho "extc++.h not found"
        precompile=0
    fi

    if [ $precompile -eq 1 ]; then
        hash=$(echo $parameters | md5sum | cut -d ' ' -f 1)
        precomp_dir=~/.local/include/c++-$hash
        mkdir -p $precomp_dir

        local_stdc=$precomp_dir/stdc++.h
        local_stdc_gch=$precomp_dir/stdc++.h.gch
        local_extc=$precomp_dir/extc++.h
        local_extc_gch=$precomp_dir/extc++.h.gch
        if [ ! -f "$local_stdc" ]; then
            blueecho "Copying stdc++.h"
            cp $stdc $local_stdc
        fi
        if [ ! -f "$local_extc" ]; then
            blueecho "Copying extc++.h"
            cp $extc $local_extc
        fi
        if [ ! -f "$local_stdc_gch" ]; then
            blueecho "Precompiling stdc++.h"
            g++ -x c++-header $local_stdc -o $local_stdc_gch $parameters
            if [ $? -ne 0 ]; then
                redecho "Failed to precompile stdc++.h"
                return 1
            fi
        fi
        if [ ! -f "$local_extc_gch" ]; then
            blueecho "Precompiling extc++.h"
            g++ -x c++-header $local_extc -o $local_extc_gch $parameters
            if [ $? -ne 0 ]; then
                redecho "Failed to precompile extc++.h"
                return 1
            fi
        fi
        greenecho "Precompiled headers are in $precomp_dir"
        parameters="$parameters -include $local_stdc -include $local_extc"
    else
        redecho "Precompilation is disabled"
        return 1
    fi
}


mask_i=$1
inp=$2
outp=${inp%.*}.bin
shift;shift;

basic="-std=c++20 -O2 -g -Wall -Wextra -pedantic"
#basic="-x c++ -lm -g -O -Wall -Wextra -pedantic"
warnings="-Wshadow -Wformat=2 -Wfloat-equal -Wconversion -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -Wcast-qual -Wcast-align"
stl_tools="-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_FORTIFY_SOURCE=2"
gcc_tools="-fno-sanitize-recover=all -fstack-protector"
gcc_tools_slow="-fsanitize=address -fsanitize=undefined"
extra="-DLOCAL -Wfatal-errors -DDBG_MACRO_NO_WARNING"
input_rest="$@"

groups=(
    "$basic"
    "$warnings"
    "$stl_tools"
    "$gcc_tools"
    "$gcc_tools_slow"
    "$extra"
    "$input_rest"
)

masks=(
    2#1100011
    2#1101111
)
#mask_i=0
mask=${masks[$mask_i]}
greenecho $mask
parameters=""

for i in "${!groups[@]}"; do
    (( mask & (1 << i) )) && parameters+=" ${groups[$i]}"
done
grayecho $parameters
precompile $parameters
grayecho $parameters
CXXFLAGS=$parameters

if [ -f $inp.bin ] && [ $inp.bin -nt $inp ]; then
    purpleecho "BIN UP TO DATE"
    exit 0
fi
Time g++ "$inp" -o "$inp.bin" $parameters && echo -e "COMPILED\n-----"
